%title Operating Systems Design and Implementation

%toc

=Operating Systems Design and Implementation =

* 软件分为系统软件和应用软件
  * 系统软件管理系统及应用程序
  * 应用软件执行用户最终所需要的功能
  * 最基本的系统软件就是操作系统
  * 它控制计算机的所有的资源并提供开发应用程序的基础
* virtual machine
  * 在裸机上加载一层软件来管理整个系统，为用户提供一套更容易理解与编程的接口
  * 这个接口叫virtual machine
  * 层软件号操作系统
* 微程序microprogram
  * 一层原始软件
  * 控制设备并向上一层提供一套更清晰的清晰的接口
  * 它实际上是一个解释器：也取得机器语言的指令，执行相应的指令
* 精简指令集计算机（Reduced Instruction Set Computer, RISC)
  * 没有微程序层
* 操作系统专指运行在内核态(kernel mode)或管态(supervisor mode)下的程序。
  * 它受硬件保护而免遭用户篡改
  * 命令解释器 编译器 编辑器运行在用户态(user mode), 它们是应用程序。
  
==什么是操作系统 ==
===操作系统作为虚拟机 ===
* 操作系统为用户提供一台等价的扩展计算机，或叫虚拟机，它比低层硬件更容易编程。

===操作系统作为资源管理器 ===
* 跟踪资源的使用状况、满足资源请求、提高资源利用率，及协调各程序和用户对资源的使用冲突。

==操作系统发展历史 ==
* 第一台数字计算机，英国数学家Charles Babbage设计，纯机械式，无操作系统
* 第一个程序员：Ada Lovelace,诗人拜伦的女儿。

===第一代计算机(1945 ~ 1955):真空管和插板  ===
* 每一台都专门设计，使用机器语言，没有编程语言，没有操作系统
 
===第二代计算机(1955 ~ 1965):晶体管和批处理系统  ===
* 卡片，磁带，批处理（读入一队作业，顺序执行），负责读入作业并输出结果的特殊程序就是操作系统的前身
 
===第三代计算机(1965 ~ 1980):集成电路芯片与多道程序  ===
* 当一个作业在等待io时，cpu就会空闲下来，很浪费
* *多道程序(multiprogramming):*
  # 将内存划分为几部分，每一部分存放一个作业
  # 当一个作业在等待io时，另一个作业可以使用cpu
* *spooling:*
  # Simultaneous Peripheral Operation On Line, 联机即时外设操作
  # 可以很快的将卡片上的作业读入磁盘。
* *分时系统(timesharing):*
  # 多道程序的变种
  # 每一个用户有一个终端
  # cpu轮流为它们服务
  # 可以为用户提供交互式服务
  # 每个用户感觉自己拥有一个完整的计算机
  # cpu空闲时可以执行后台大作业
* UNIX
* POSIX

===第四代计算机(1980 ~ NOW):个人计算机  ===
* 网络操作系统
* 分布式操作系统


==操作系统基本概念 ==

*系统调用*
* 由操作系统提供的操作系统与用户程序之间交互的 *扩展指令集*
* 两大类
* 与进程相关的 *系统调用*
* 与文件相关的 *系统调用*

===进程Process ===
*进程Process*
* 一个进程本质上是一个程序的 *执行*
*地址空间address space*
* 每个进程拥有自己的address space: 0 ~ 最大值
* address sapce 中有： 可执行程序， 程序数据， 程序的堆栈
*进程还包括：一组寄存器register 程序计数器program counter 指针stack pointer  其他硬件寄存器hardware register*
*进程表 process tabel:*
* 除address space之外的进程所有的信息都保存在一张表中
* 每一进程对应表中的一项
* process table 是一个结构数组或链表
*一个进程包括:*
* address space, 又叫内核映像core image
* process table中的一项
*进程间通信*

*中断和信号*

*一个挂起的进程，需要再运行，则需要把进程暂停前的所有信息都保存下来*


===文件File ===

===进程Process ===
* File
* Directory
* 9位保护码
* Mount
* 设备文件（Special File)
  * 块设备文件Block special files
  * 字符设备文件Character special files
* piple

===命令解释器Shell ===
* 它不是操作系统的一部分
* 这是终端用户与操作系统之间的一个重要接口

==系统调用System Calls ==
* POSIX标准

*进程管理Process Management:*
  {{{ class="brush:c"
    //创建一个child process
    pid = fork();
    
    //等待一个child process结束
    pid = waitpid (pid, &statloc, opts)
    
    //老版本的waitpid
    s = waitpid (&status)
    
    //替换一个进程的内核映象
    s = execve (name, argv, envp)
    
    //结束进程执行返回一个状态码
    exit (status)
    
    //设置数据段大小
    size = brk (addr)
    
    //返回调用者进程号
    pid = getpid ()
    
    //返回调用者组标识号
    pid = getpgrp ()
    
    //创建一个会话并返回其组标识号
    pid = setsid ()
    
    //用于调试
    l = ptrace (req, pid, addr, data)
    }}}
    
*信号Signal*
  {{{ class="brush:c"
    //定义对信号的处理工作
    s = sigaction (sig, &act, &oldact)
    
    //从信号返回
    s = sigreturn (&context)
    
    //检查或修改信号掩码mask
    s = sigprocmask (how, &set, &old)
    
    //获得阻塞信息集合
    s = sigpending (set)
    
    //替换信号掩码并挂起进程
    s = sigsuspend (sigmask)
    
    //给进程发送一个信号
    s = kill (pid, sig)
    
    //设置时间闹钟
    residual = alarm (seconds)
    
    //挂起调用进程直到下一个信号
    s = pause ()   
    }}}

*文件管理File Management:*
  {{{ class="brush:c"
    //创建一个新文件
    fd = creat (name, mode)
    
    // 创建普通、设备文件或目录i节点
    fd = mknod (name, mode, addr)
    
    //打开一个文件进行只读或读写操作
    fd = open (file, how, ...)
    
    //关闭一个已打开的文件
    s = close (fd)
    
    //从文件读数据到缓冲区
    n = read (fd, buffer, nbytes)
    
    //从缓冲区将数据写入文件
    n = write (fd, buffer, nbytes)
    
    //移动文件指针
    pos = lseek (fd, offset, whence)
    
    //获取文件状态信息
    s = stat (name, &buf)
    
    //获取文件状态信息
    s = fstat (fd, &buf)
    
    //为打开的文件分配一个新的文件描述符
    fd = dup (fd)
    
    //创建一个管道
    s = pipe (&fd[0])
    
    //对文件时行特殊操作
    s = ioctl (fd, request, argp)
    
    //检查文件的访问权限
    s = access (name, amode)
    
    //重命名文件
    s = rename (old, new)
    
    //文件加锁及其他操作
    s = fcntl (fd, cmd, ...)
    }}}
    
*目录及文件系统管理Dir. & File System Mgt:*
  {{{ class="brush:c"
    //创建一个新目录
    s = mkdir (name, mode)
    
    //删除一个目录
    s = rmdir (name)
    
    //创建一个新项name2，它指向name1
    s = link (name1, name2)
    
    //删除一个目录项
    s = unlink (name)
    
    //挂一个文件系统
    s = mount (special, name, flag)
    
    // Unmount a file system
    s = umount (special)
    
    //将缓存中的数据块回写到磁盘
    s = sync ()
    
    //改变工作目录
    s = chdir (dirname)
    
    //改变根目录
    s = chroot (dirname)
    }}}
    
*保护Prodeciton:*
  {{{ class="brush:c"   
    //修改文件的保护位
    s = chmod (name, mode)
    
    //获取调用进程的uid
    uid = getuid ()
    
    //获取调用进程的gid
    gid = getgid ()
    
    //设置调用进程的uid
    s = setuid (uid)
    
    //设置调用进程的gid
    s = setgid (gid)
    
    //修改文件的拥有者和组
    s = chown (name, owner, group)
    
    //修改文件模式掩码
    oldmask = umask (complmode)
    
    }}}
    
*时间管理Time Management:*
  {{{ class="brush:c"
    //获取自19700101以来的秒数
    seconds = time (&seconds)
    
    //获取自19700101以来的时间
    s = stime (tp)
    
    //设置文件最后访问时间
    s = utime (file, timep)
    
    //获取当前的用户和系统时间
    s = times (buffer)
    
    }}}
    
===进程管理的系统调用Process management===

*fork():*
* fork是创建新进程的唯一途径
* fork创建了一个调用者进程的精确副本：文件描述符，寄存器等所有内容
* fork后原进程子进程各自执行，互不相关
* fork时，两个进程的变量拥有相同的值，此后各自维护
* fork()对子进程返回0， 对你进程返回一个正整数，为新子进程的pid
* fork()可以以返回值区分是子进程还是你进程
* shell框架demo:
  {{{ class="brush:c"
        #define TRUE 1
        
        while (TRUE){                           /* repeat forever */
            type_prompt();                      /* display prompt on the screen */
            read_command(command, parameters);  /* read input from terminal */
            
            if (fork() != 0){                   /* fork off child process */
                /* Parent code. */
                waitpid(1, &status, 0);         /* wait for child to exit */
            } else {
                /* Child code. */
                execve(command, parameters, 0); /* execute command */
            }
        }
    }}}
    
*exec():*
* 有三个参数：
  # 待执行文件名：用于替换内核映象
  # 指向参数数组的指针
  # 指向环境变量数组的指针
* 简化版：`execl execv execle execve`
 
*main(argc, argv, envp):*
* argc: 包括程序名在内的参数个数
* argv: 指向参数数组的指针, argv[0]为程序名
* envp: 环境变量指针
 
*进程的存储空间:*
* 分为三部分：正文段（text segment, 程序代码), 数据段（data segment,即变量), 堆栈段（stack segment)
* data segment向上增长，stack segment向下增长；
* statck segment的增长随程序的执行自动进行
* data segment通过brk显示完成
* data segment的结束指针必须小于stack segment的指针，不然会重叠，这是不允许的。
 
*getpid():*
* 获得当前进程的标识号

===信号管理的系统调用System Calls for Signaling===
*收到一个未声明处理的signal:*
* 如果一个进程收到一个 *未声明要接收的* signal时，该进程被撤消，即被杀死
 
*声明要接收的signal:*
# 使用`sigaction`   
# 有两个参数，后两个是地址
  * 指明signal
  * 要处理signal的procedure地址
  * signal原先处理procedure的地址
   
*进程接收到一个signal时:*
# 将当前进程状态压栈
# 调用指定的signal处理procedure
# 处理结束，调用`sigreturn`,执行被signal中断的操作

*signal阻塞:*
# signal可以被阻塞
# 阻塞的signal被扶起，直到被解除阻塞
# `sigpromask`定义一个进程阻塞的信息集
# `sigperding`查询因阻塞而挂起的信号集
# `sigsuspend`进程用于设定阻塞信号位图，并将本身挂起

*忽略一个signal:*
# `SIG_IGN`
# 忽略信号SIGINT
  {{{ class="brush:c"
    sigaction(SIGINT, SIG_IGN, NULL);
    }}}
# 需要在执行exec前执行

*恢复一个signal默认处理:*
# `SIG_DFL`
# 恢复信号SIGINT默认行为
  {{{ class="brush:c"
    sigaction(SIGINT, SIG_DFL, NULL);
    }}}
    
*向指定进程发送一个signal:*
# 使用`kill`
# signal 9(sigkill)不能被捕获或忽略

*alarm系统调用:*
# 参数：一个以秒为单位的间隔
# 时间到达，则向该进程发送一个sigalrm
# 任一时刻一个进程只能且个闹钟
 
*pause系统调用:*
# 挂起调用进程，直到信号到来
# 其他进程就可以使用cpu了
# 通常用于一个进程等待信号，又不需要什么操作时
    
===文件管理的系统调用System Calls for File System ===
*create系统调用:*
# `fd = create("abc", 0751)`
# 创建文件
# 参数为：路径名，保护模式
  * 注意并不是把文件的权限设置为了0751, 而是要和umask指定掩码的反码相与后才是真正的权限
# 并同时以写的方式打开，不管模式是什么
# 返回fd, 通过fd可以对文件进行写操作
# 对于一个已存在的文件进行该系统调用，将破坏该文件
# 已过时，由 *open* 代替

*mknod系统调用:*
# `fd = mknod("/dev/tty2", 020744, 0x0402)`
# 创建设备文件
# parameter 1:要创建的文件名
# parameter 2:020744指明为一个字符设备文件，权限为rwxr--r--
  * 注意并不是把文件的权限设置为了0744, 而是要和umask指定掩码的反码相与后才是真正的权限
# parameter 3:高字节为主设备号4， 低字节为次设备号2
# 只能被超级用户调用 
 
*open系统调用:*
# 打开文件
# parameter 1:文件路径可以是绝对路径，也可以是相对路径
# parameter 2:打开方式，O_RDONLY O_WRONLY O_RDWR
# return :fd可用于读写操作
# 用完后，需要调用close系统调用进行关闭.关闭后,fd可以被后面的系统调用重用
 
*read&write系统调用:*
# 读写操作
 
*lseek系统调用:*
# 修改文件指针，read和write就可以在文件的任一位置进行读写了
# paratmer 1: fd
# paratmer 2: position
# paratmer 3: 上一个参数position是相对于文件开头，当前position,文件末尾
# return :    被修改后的绝对位置

*stat&fstat系统调用:*
# 获取文件状态信息
# 都有两个参数
# parameter 1:指定文件
  * stat接收一个文件名
  * fstat接收一个fd
  * fstat适合一个打开的文件
# parameter 2:一个用来存放信息的结构
  {{{ class="brush:c"
    struct stat{
        short st_dev;               /* device where i-node belongs */
        unsigned short st_ino;      /* i-node number */
        unsigned short st_mode;     /* mode word */
        short st_nlink;             /* number of links */
        short st_uid;               /* user id */
        short st_gid;               /* group id */
        short st_rdev;              /* major/minor device for special files */
        long st_size;               /* file size */
        long st_atime;              /* time of last access */
        long st_mtime;              /* time of last modification */
        long st_ctime;              /* time of last change to i-node */
    };
    }}}

*dup系统调用:*
# 用于文件描述符的操作
# `n=dup(fd)`:将文件描述符n指向文件描述符fd把指向的文件，  *n将是当前最小的可用的文件描述符*
# `dup2(fd, fd2)`:fd2为一个未被使用的文件描述符，将文件描述符fd2指向文件描述符fd把指向的文件
 
*pipe系统调用:*
# `pipe(&fd[0])`
# 创建一个管道
# 返回两个文件描述符，放于fd[0]和fd[1]
# 一个用于读一个用于写
 
*ioctl系统调用:*
# 用于设备文件
# 特别是字符设备文件
# 比如用于改变终端模式
# `ioctl(fd, TCSETS, &termios)`
 
*终端的三种模式:*
# *Cooked mode:*
  # 删除、终止键正常工作
  # CTRL-S CTRL-Q 用于停止恢复终端输出
  # CTRL-D 文件终止符
  # CTRL-C interrupt signal
  # CTRL-\ quit signal并强制内核映象转储
# *raw mode:*
  # 上述功能都被禁止
  # 数据不加处理的传给程序
  # 从终端每读到一个字符都传给程序，而cooked会读完一行再传
# *Cbreak mode:*
  # 上述两者之间
  # 删除、终止键、CTRL-D被禁止
  # CTRL-S, CTRL-Q, CTRL-C, and CTRL-\ 有效
  # 同raw模式，不等一行结束，单个字符就会传给程序

*access系统调用:*
# 检查对一个文件是否具有某种访问权限
 
*rename系统调用:*
# 重命名文件 
 
*fcntl系统调用:*
# 类似于ioctl
# 可用于文件加锁
# 可用于对文件的一部分进行加锁 解锁
# 可用于检测文件某部分是否被上锁
# 但本身不包括任何和锁相关的语义，由程序员自定义
 
===目录管理的系统调用System Calls for Directory Management ===

*mkdir&rmdir系统调用:*
# 创建或删除 *空目录*

*link系统调用:*
# `link("/usr/jim/memo", "/ur/ast/note");`
# 使 *同一个文件* 以不同的名称出现， 往往在不同的目录下
# Unix中每个文件拥有一个唯一的标识符，叫做`i-number`, 它是一个指向表`i-nodes`的索引值
# 表中存储了谁拥有这个文件，及文件所占磁盘块的信息，等等
# *目录* 也是一个文件，它由`i-number` 和 `file name`的对应信息组成, 每一个对应关系就是一个 dirctory entry
  # 早期目录文件中的 directory entry 由16byte组成，2byte存储i-number, 14byte存储文件名
  # 后来为了支持长文件名，使用了新的数据结构，总体来说还是i-number, file-name pair
# 可以看出link所做的工作，就是在 *目录文件* 中添加一个directory entry, 使用指定的name和i-number
# 系统调用`unlink`可以从 *目录文件* 中删除一个directory entry
# 表`i-nodes`中记录了每个`i-number`被directory entry引用的次数
  # 如果次数为0，说明没有directory entry 引用，该i-number代表的文件就可以删除了
   
*mount&umount系统调用:*

*sync系统调用:*
# 操作系统有一个缓存区，保存了最近经常被访问的磁盘数据，可以避免重复从磁盘读数据
# 但当缓冲区的数据被更改时，需要写回磁盘，sync就是做这个的
# 操作系统通常有一个后台进程（比如update），间隔地执行sync（比如30s）
 
*chdir＆chroot系统调用:*
# chdir 改变当前目录
# chroot 改变根目录
  # 只有root用户可以执行
  # 执行后，绝对路径就会从这个新根目录开始
   
===保护系统调用System Calls for Protection ===

# 每个文件都一个 *11* 位的保护方式码
# 其中9位表示owner,group, others对文件的读、写、执行权限
# 系统调用 *chmod* 可以改变一个文件保护模式
# 另 *2位* 是 `02000` 和 `04000` 分别代表 SETGID位和SETUID位
# real UID, real GID, effective UID, effective GID
  # 默认都是指向 *执行这个文件* 的 user 和 group
  # 若设置了SETUID(04000), effective UID就会指向文件的owner
  # 若设置了SETGID(02000), effective GID就会指向文件的group
 
*getuid＆getgid系统调用:*
# getuid:同时返回real UID和effective UID
# getgid:同时返回real GID和effective GID
# 有四个对应的库函数，用于返回特定的信息：getuid geteuid getgid getegid
 
*setuid＆setgid系统调用:*
# 一般用户是不能改变uid的，除非执行了一个设置了SETUID的文件，这里就会把effective UID设置为这个文件的owner,而不是执行这个文件的用户，当然它们也可以相同
# root用户可以随意修改
  # setuid：同时修改real UID和effective UID
  # setgid：同时修改real GID和effective GID
   
*umask系统调用:*
# `umask(022)`
# 设置一个内部掩码，创建文件时使用(creat mknode), 用于 *关掉某些模式位* 
# `creat("file", 0777)`:0777与022的反码相与得0755，这才是真正的权限
# 一般用户就可以执行，且会被子进程继承
 
*access系统调用:*
# 检查对一个文件是否具有某种访问权限
 
===时间系统调用System Calls for Time Management ===

*time系统调用:*
# 返回距1970/01/01 00:00(这天的开始）的秒数

*stime系统调用:*
# 设置系统时间

*utime系统调用:*
# 允许文件owner或root设置文件在i-node表中的时间

*times系统调用:*
# 返回进程的统计信息，比如用了多少cpu时间，操作系统用了多少cpu时间 。。。。
 
==操作系统结构 Operating System Structure ==

* 整体式结构 Monolithic Systems
* 层次式结构 Layered Systems
* 虚拟机结构 Virtural Machines
* 服务器客户端结构 Server-Client Model
