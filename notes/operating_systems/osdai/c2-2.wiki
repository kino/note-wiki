%title Processes - Interprocess Communication 

=进程　Processes= 
%toc

==进程间通信　Interprocess Communication==

*三个要考虑的问题:*
# 一个进程如何传递消息给另一个进程
# 两个或多个进程参与临界活动critical activities时，如何不互相影响
# 存在信赖关系时，如何确定合适的次序

这三个问题中的后两个同样对线程生效。因为线程共享地址空间，所以第一个问题对线程来说简单

===竞争条件 Race Condition===
当两个或多个进程读写某些共享数据时，最终结果严格依赖于它们运行的时序，这种情况被称之为竞争条件。

===临界区 Critical Sections ===

解决竞争条件的问题，需要保证在同一时刻只有一个进程对共享数据进行读写。

换言之，我们需要 *"互斥 mutual exclusion"* :
* 某种方法来保证当一个进程使用共享变量或文件时，其他进程不允许做同样的事情。

*Critical region* or *Critical setions* : 我们把程序中访问共享内存的部分叫做临界区。
* 如果使得两个进程不能同时处于临界区，就可以避免竞争条件

一个好的方案需要满足四个条件：
# 任何两个进程不能同时处于临界区
# 不对cpu的速度和数目做任何假设
# 临界区外的进程不能阻塞其他进程
# 一个进程不能在临界区外永远等待

===忙等待实现互斥===

*忙等待 Busy Waiting*: 
# 持续地检测一个值，直到它具有某一特定值
# 应该避免忙等待，因为它浪费CPU 时间
# 但在预期等待时间很短时，可以使用
# 使用busy waiting的锁变量，称之为自旋锁spin lock

*关闭中断 Disabling Interrupts*:
# 每个进程在进入临界区后，关闭中断
# 中断关闭后，也不会发生任何时钟中断
# CPU在进程间进行切换，只有在发生时钟中断或其他中断时
# 进入临界区的进程就可以检查或更新共享内存中的变量了

# 不应该给用户进程关闭中断的能力
# 关闭后，不在开启怎么办
# 对多核cpu也有问题，因为关闭中断只会关闭进程所在cpu的中断，其他cpu上运行的进程仍然可能访问共享内存

# 在内核进程在执行更新变量或列表的一些指令时，关闭中断将是很有用的
# 比如在就绪状态进程列表状态不一致时发生中断，就可能造成竞争条件


    *关闭中断对操作系统是一个很有用的功能，但对用户进程并不是合适的实现互斥的方法。*



*锁变量 Lock Variables*:
# 使用一个锁变量lock
# 如果该变量为0，进程可进入临界区，并置为1
# 如果该变量为1，说明已经有进程进入临界区，需要等待
# 这种方案是有漏洞的，因变变量的检查与重置并不是一个原子操作

*严格轮换 Strict Alternation:*
{{{ class="brush:c"
    //对于线程a
    while (TRUE){
        while(turn != 0) /* loop */;
        critical_region();
        turn  = 1;
        noncritical_region();
    }
                            
    //对于线程b
    while (TRUE) {
        while(turn != 1) /* loop */;
        critical_region();
        turn  = 0;
        noncritical_region();
    } 
  }}}
# 注意上面不等同于锁变量
  # 进程a在turn等于0时才能进入临界区
  # 进程b在turn等于1时才能进入临界区
# 也就是两个进程严格遵循一个进一次临界区的规则
# 如果现在轮到进程a进入临界区，它又不进入，进程b将永远无法进入临界区，这违反了上面第三条规则

*Peterson的解决方案:*
{{{ class="brush:c"
    #define FALSE 0 
    #define TRUE 1 
    #define N 2                      /* number of processes */

    int turn;                        /* whose turn is it? */
    int interested[N];               /* all values initially 0 (FALSE)*/ 
    void enter_region(int process)   /* process is 0 or 1 */
    {
        int other;                   /* number of the other process */ 
        other = 1 - process;         /* the opposite of process */
        interested[process] = TRUE;  /* show that you are interested */ 
        turn = process;              /* set flag */
        while (turn == process && interested[other] == TRUE)   /* null statement */;
    }
    void leave_region(int process)   /* process: who is leaving */ 
    {
        interested[process] = FALSE; /* indicate departure from critical region */ 
    }
  }}}
# 1981年，G.L.Peterson发明的一种简单互斥算法
# 两个进程竞争临界区
# 它使用了一个共享变量指定下一个可以进入临界共的进程
# 而进入的条件是，轮到自己且对方不在临界区内
# 进入临界区的进程，在离开临界区时，会清除一个标志


*TSL指令 The TSL instruction:*
{{{ class="brush:c"
    enter_region:
        TSL REGISTER,LOCK       |copy LOCK to register and set LOCK to 1 
        CMP REGISTER,#0         |if it was non zero, LOCK was set, so loop
        JNE ENTER_REGION        |was LOCK zero?
        RET                     |return to caller; critical region entered
    leave_region:
        MOVE LOCK,#0            |store a 0 in LOCK
        RET                     |return to caller
  }}}
# 需要硬件支持
# 提供一个指令，TSL
  # 测试并上锁， Test and Set Lock, TSL
  # 它将内存中的一个字读入寄存器，将该内存地址设置一个非0值
  # 保证读操作和写操作是不可分隔的，即原子的
  # 执行该指令的CPU会锁住内存总线，禁止其他CPU在该指令结束前访问内存
# 一个进程在进入临界区时使用TSL指令
# 离开临界区时，使用MOV指令移除锁变量
# 这是一个需要硬件支持的锁变量
  
*忙等待的本质:*
# 一个进程需要进入临界区时
# 先检查是否允许进入
# 若不允许，则原地踏步等待，直到允许为止
# 浪费CPU
 
*优先级翻转问题 Priority Inversion Problem:*
# 进程H与进程L竞争临界区，进程H优先级高
# 进程H进入阻塞状态（等待IO完成），进程L进入临界区
# 进程H进入就绪状态（IO完成）， 进程L还未退出临界区
# 进程调度算法调用进程H，等待进入临界区
# 因为优先级问题，进程L无法被调度到，无法退出临界区
# 进程H也无法进入临界区
 
===睡眠与等待 Sleep and Wakeup ===
* *Sleep:* 调用进程阻塞，即挂起，直到有另一个进程将其唤醒
* *Wakeup:*唤醒一个指定的进程，通过参数指定


*生产者消费者问题 The Producer-Consumer Problem:*
* 也叫做 有界缓冲区问题 the Bounded Buffer Problem
* 两个进程共享一个固定大小的缓冲区
* 一个进程负责将信息放入缓冲区，称之为生产者
* 一个进程负责从缓冲区中取出信息，称之为消费者
* 这个问题可以扩展为多个生产者和多个消费者

当缓冲区满时的一个解决方案：
* 生产者进程进入睡眠
* 消费者进程消费消息后，再将生产者唤醒
 
当缓冲区为空时的一个解决方案：
* 消费者进程进入睡眠
* 生产者进程生产消息后，再将消费者唤醒

这里就会需要一个变量来追踪缓冲区的当前状态，这就产生了竞争条件。


*唤醒等待位 wakeup waiting bit*

===信息量 Semaphores ===
# 用一个整型变量来存储被唤醒wakeup的次数，留待将来使用，由E.W Dijkstra在1965年提出
# 而就此引入一种新的变量类型，称之为信号量Semaphore
# 该变量>=0
# 为0说明没有唤醒操作在等待，大于0说明有唤醒操作在等待

*操作 :*
# 支持两种操作down和up
# down对信号量减1，也就是用掉一个唤醒操作
# up对信息量加1，增加一个唤醒操作
# 这两种操作分别对应的两个系统调用是sleep和wakeup, 这两个词也代表了两种操作可能对进程起到什么样的影响

*Down操作 :*
* 如果信息量>0
  # 信息量减1
  # 调用进程继续进行
  # 注意这里进程并没有阻塞，而是用掉了一个唤醒操作
* 如果信号量==0
  # 因为信息量要求>=0
  # 所以这里不能减1
  # 所以调用进程要等到信号量能够减1的时候
  # 调用进程只能等在这了，就阻塞了，睡眠了
  # 这时这个down的操作并没有完成，而是调用进程阻塞在这等它完成
* 对信号量的比较、修改、或进程进入睡眠，合起来将是一个原子操作
# 这样以保证在一个进程开始对一个信号量进行操作后，在它完成这个操作或阻塞前，其他进程是不能对这个信号量进行操作的

*Up操作 :*
* 如果有进程因为这个信号量而阻塞
  # 这些进程就是对信号量进行down操作而没完成的
  # 这时信号量一定为0
  # 系统为从这些进程里挑选一个唤醒
  # 信号量保持为0（可以认为刚加，就被用掉一个）
* 如果没有进程因为这个信号量而阻塞
  # 信号量加1
* 和上面一样，对信号量的修改或唤醒进程，也是一个原子操作
 
*信号量的实现方式 :*
# 通常作为系统调用实现
# 检测，设置信号量，将进程阻塞，为了实现将这些操作作为原子操作，系统为简单的关掉中断
# 上面这些操作只需要只个指令，所以关掉中断并不会有多少副作用
# 对于多CPU：
  # 信号量应该由一个锁变量保护，确保同一个时刻只有一个cpu对信号量进行操作
  # 使用TSL指令
   


