%title perl向点高级特性
=perl向点高级特性=
日期: 2012-06-04 17:06
%toc

# 利用eval捕捉错误。
  {{{ class="brush:perl"
      eval { $barney = $fred / $dino };
	}}}
  * 当执行eval 块时发生了通常的严重错误，eval 块会停止执行，但程序不会崩溃。
  * 当eval 结束时，你想知道它是正常结束的，还是发生了严重错误。
  * 这些结果放在特殊变量$@之中。如果eval为你捕捉了严重错误，则$@中将有程序失败的原因
  * 可能如：Illegal division by zero at my_program line 12。
  * 如果没有错误，则$@为空。这意味着$@是一个有用的Boolean（true/false）值(真，表示有错误)，因此可能在eval块后看到如下的代码：
  {{{ class="brush:perl"
      print “An error occurred: $@”if $@;
	}}}
  * eval可以捕捉die
# 立马终止程序，使用exit
# 使用grep：
  {{{ class="brush:perl"
      my @odd_numbers = grep {$_ % 2} 1..1000;
      my @matching_lines = grep /\bfred\b/i, <FILE>;
	}}}
# 使用map 对列表项进行变换
  {{{ class="brush:perl"
      my @formatted_data = map {&big_money($_)} @data;
	}}}
# 不用双引号的hash keys
  {{{ class="brush:perl"
      #Hash 中包含了bowling 的成绩
      my %score = (
              barney => 195,
              fred => 205;
              dino => 30,
              );
	}}}
# slice
  {{{ class="brush:perl"
      my($first, $last) = (sort @names)[0, -1];
      my @numbers = @numbers[ 9, 0, 2, 1, 0 ];
      
      #hash slice:
      my @three_score = ($score{“barney”}, $score{“fred”}, $score{“dino”});
      my @three_scores = @score{ qw/ barney fred dino/ };
      
      my @players = qw/ barney fred dino /;
      my @bowling_scores = (195, 205, 30);
      @score{ @players } = @bowling_scores;
	}}}
