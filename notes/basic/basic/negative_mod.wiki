%title 负数的取模运算(转)

=负数的取模运算(转)=

转自: http://www.googies.info/blog/184.html
日期: 2012-05-10 11:05

%toc

我们知道，在不同的语言中，对负数执行取模运算，结果有可能会是不同的。例如，(-11) % 5在Python中计算的结果是4，而在C (C99) 中计算的结果则是-1。

==truncate除法 && floor除法==
　　在大多数编程语言中，如果整数a不是整数b的整数倍数的话，那么a、b做除法产生的实际结果的小数部分将会被截除，这个过程称为截尾 (truncation)。如果除法的结果是正数的话，那么一般的编程语言都会把结果趋零截尾，也就是说，直接把商的小数部分去除。但是如果除法的结果是负数的话，不同的语言通常采用了两种不同的截尾方法:一种是趋零截尾 (truncate toward zero)，另一种是趋负无穷截尾 (truncate toward negative infinity)；相应的，两种除法分别被称为truncate除法和floor除法。

　　事实上，可以认为不管除法的结果是正是负，truncate除法都是趋零截尾；而floor除法都是趋负无穷截尾。

==取模运算==
　　取模运算实际上是计算两数相除以后的余数。假设q是a、b相除产生的商 (quotient)，r是相应的余数 (remainder)，那么在几乎所有的计算系统中，都满足a = b*q + r，其中|r| < |a|。因此r有两个选择，一个为正，一个为负；相应的，q也有两个选择。如果a、b都是正数的话，那么一般的编程语言中，r为正数；或者如果a、b都是负数的话，一般r为负数。但是如果a、b一正一负的话，不同的语言则会根据除法的不同结果而使得r的结果也不同，并且一般r的计算方法都会满足r = a - (a/b) * b。

==常见语言==

===(1) C/Java语言===
　　C/Java语言除法采用的是趋零截尾 (事实上，C89对于除数或被除数之一为负数情况的结果是未定义的；C99才正式确定了趋零截尾)，即truncate除法。它们的取模运算符是%，并且此运算符只接受整型操作数。一个规律是，取模运算的结果的符号与第一个操作数的符号相同 (或为0)。因此(-11) % 5 = -11 - [(-11)/5] * 5 = -11 - (-2) * 5 = -1。

===(2) C++语言===
　　C++语言的截尾方式取决于特定的机器。如果两个操作数均为正，那么取模运算的结果也为正数 (或为0)；如果两个操作数均为负数，那么取模运算的结果为负数 (或为0)；如果只有一个操作数为负数，那么取模运算的结果是取决于特定实现的。

===(3) Python语言===
　　Python语言除法采用的是趋负无穷截尾，即floor除法。它的取模运算符也是%，并且此运算符可以接受浮点操作数。一个类似的规律是，取模运算的结果的符号与第二个操作数的符号相同。因此(-11) % 5 = -11 - [(-11)/5] * 5 = -11 - (-3) * 5 = 4。

　　这里需要注意的是，Python 3.x中"/"运算符的意义发生了变化，"/"产生的结果将不会再进行截尾;相应的"//"运算符的结果才会进行截尾。

===(4) Common Lisp===
　　Common Lisp的特殊操作符 (special operator) "/"的结果是分数，因此不会存在截尾的问题。但是Common Lisp提供了TRUNCATE函数和FLOOR函数分别对应上述的两种除法。相应的，Common Lisp的REM函数类似于C/Java语言中的取模运算；而MOD函数类似于Python语言中的取模运算。
