%title 函数与程序结构

=函数与程序结构=

日期: 2012-05-10 18:05

%toc

==函数基础==

===函数定义===

* 定义形式
  {{{ class="brush:c"
		return-type function-name(argument declarations){
			declarations and statements
		}
  }}}                                 
* 函数定义的各个部分都可以省略，最简单的函数，可以用于点位，留以后补充
  {{{ class="brush:c"
		dummy(){}
  }}}                                 
* 省略返回值类型，默认返回int
* 程序可以看作变量定义和函数定义的集合。
* 函数之间的通信可以通过参数、返回值、外部变量。
* 函数在源文件中出现的顺序可以是任意的，只要同一个函数不被分离到多个源文件中就可以了。
* return后没有表达式　或　没有return语句时，表示没有返回值.
 
==返回非整型的函数==

===函数声明===

* 为了知道返回非整型值，可以在调用函数中使用 _*显示声明*_
  {{{ class="brush:c"
  
		main()
		{
			double sum, atof(char []);
			//声明sum是一个double类型的变量，
			//atof函数带有一个char[]类型参数，且返回一个double类型的值
			   ...
		}
  }}}                                 
* 如果没有显示声明,函数会在第一次使用它的表达式 _*隐式声明*_
  {{{ class="brush:c"
     double sum = 0.0;
     sum += atof(line);
	 //先前没有出现过的一个名字出现在某个表达式中,且其后有一个左圆括号
	 //上下文会认为这个名字是一个函数
	 //其返回值是int型, 并不会因为sum是double,而把函数的返回值声明为double
	 //但不会对其参数进行假设
  }}}                                 
* 如果函数声明中不包含参数
  {{{ class="brush:c"
     double atof();
	 //编译程序不会对函数参数作任何假设,并关闭所有参数检查
	 //这是为了新编译器能够编译老的程序
	 //如果真的没有参数,推荐使用void声明:　doube f1(void)
  }}}                                 
* 函数声明与函数定义必须一致
  * 如果函数声明与函数定义在同一个源文件中,不一致时,编译会报错
  * 不在同一个源文件中,不一致时,编译不会报错
* 如果函数定义出现在最前面,它本身就代表了声明.
  * 在同一个源文件中,下面编译不会报错:
  {{{ class="brush:c"
     #include <stdio.h>
	 float f1(){
	   return 1.2;
	 }
	 //上面即是函数定义,也是函数声明,所以编译不会报错　
	 void main(){
	   printf("%f \n", f1());
	 }
  }}}                                 
  * 在同一个源文件中,下面编译会报错:
  {{{ class="brush:c"
     #include <stdio.h>
	 void main(){
	   printf("%f \n", f1()); //这里隐式声明:int f1()
	 }
	 float f1(){
	   return 1.2;
	 }
	 //函数定义返回float, 声明与定义不一致,编译报错
  }}}                                 

==外部变量==

* C语言可以看作由一系列的外部对象构成
* 外部对象可能是变量,也可能是函数
* 外部变量定义在函数之外,因此可以在很多函数中使用
* 函数中不能再定义函数,所以函数本身也是"外部的"

自动变量与外部变量
* 自动变量只能在函数内部中使用,函数被调用时开始存在,函数退出时变量消失.
* 外部变量永久存在

==作用域规则==

===外部变量的作用域===
外部变量或函数的作用域, _*是从声明它的地方开始,到声明所在文件的结尾.*_

===外部变量声明与定义===

 在一个程序中的 _*所有源文件*_ 中, _*一个外部变量只能在某个文中定义一次,　其他需要访问该变量的文件可以使用extern声明来访问它.*_

* _*外部变量定义*_
  * 用于创建变量,分配存储单元
  * _*了有变量声明的作用*_ , 如果在当前文件中,前面未声明过,定义前不能使用变量,定义后就可以了
    {{{ class="brush:c"
      int sp;
      double val[MAXVAL];
	  }}}
	  
* _*外部变量声明*_
  * 用于说明变量的属性,主要是类型
  * 声明只是声明了一种类型的变量, _*它不会创建变量,也不会分配存储单元*_
    {{{ class="brush:c"
      extern int sp;
      extern double val[];//没有创建变量,所以也不确定数组的长度
	  }}}
  * 外部变量定义也是一种隐含的声明,但定义前也可以显示声明.
   
* _*在外部变量定义所在文件中*_
  * 如果只在外部变量定义后使用,可以不声明,因为定义已经隐含声明了.
  * 如果需要在定义前使用,就必须在使用的地方之前使用external进行显式声明.
   
* _*在外部变量定义所在文件之外的文件中使用外部变量*_
  * 必须在使用的地方之前使用external进行显式声明.
  
==头文件==

我们作了一个程序:
# 程序有多个函数组成,函数定义分别放在了不同的源文件中
# 程序使用了多个外部变量,而且外部变量定义分别放在了不同的源文件中
# 当我们使用的函数或外部变量的定义不在当前源文件中时,我们就必须声明它们.
# 这样就可能在多个源文件中进行一样的声明,重复劳动.

使用头文件:
# 我们可以把程序的所有函数声明和外部变量声明,及#define放到一个以`.h`结尾的文件中.
# 然后在程序的每个源文件中使用`#include <xx.h>`, 把那个文件包含进来就可以了.
# 这个以`.h`结尾的文件就是头文件.

结论:
# 中等规模的程序,最好只用一个头文件存放程序中各部分的共享对象.
# 较大的程序可以使用更多的头文件,但一定要精心的组织它们.

==静态变量==

===static关键字限定外部变量或函数===
_*限定其后所跟的对象的作用域为其所在源文件的剩余部分.*_

===static限定的外部变量===
* 不能被其所源文件之外的源文件访问,声明也不行.
    {{{ class="brush:c"
      //s1.c
      static int e1=100;
      
      //s2.c
      extern int e1;//编译出错,声明外部变量会出错,因为找不到外部变量e1的定义,
      //"static int e1=100;"会把外部变量e1的作用域限定在s1.c中,
      //只有在s1.c中的"static int e1=100;"之后的函数才可以访问
	  }}}
* 但其他源文件可以在定义一个同名的外部变量,互不影响,但static所在的源文件没有办法访问那个同名的外部变量
    {{{ class="brush:c"
      //s1.c
      static int e1=100;
      
      //s2.c
      extern int e1;//声明外部变量不会出错,它会使用s3.c中e1的定义,
      
      //s3.c
      int e1=200; //定义一个名为e1的外部变量,并不会冲突
	  }}}
  
===static多用于变量, 也可用于函数===
* 函数默认是全局访问的,程序的各个部分都可以访问.
* 如果用static限定,则表明只有函数所在的源文件可见,其他文件不可见
* 同外部变量一样,如果一个文件中用static限定了一个函数名,其他文件中还可以定义同名的函数.
* static可以加在函数声明前,也可以加在函数定义前,如果加在函数声明前,则必须与函数定义在同一个源文
    {{{ class="brush:c"
      //s1.c
      static float f1(); //这个是正确的,因为f1的定义就在同一个文件中
      static float f2(); //编译出错,这个会找不到f2的定义, 也不能访问s2.c中的f2
      
      float f1(){
          ...
      }
      
      //s2.c
      float f2(){
          ...
      }
	  }}}                                                                                     
	  
===static也可用于内部变量===
* 同自动变量一样,是某个特定函数的局部变量, 只能在该函数中使用
* 不同处:
  * 自动变量会在函数调用进开始存在,函数退出时消失
  * static修饰的局部变量,无论函数调用与否,它会一直存在.
  * 也就是说它是一种只能在某个特定函数中使用,但又一直占据存储空间的变量.
  
==寄存器变量==

{{{ class="brush:c"
  register int x;
  register char c;
  }}}                                                                                     

* 使用 _*register*_ 关键字
* 告诉编译器,这些变量使用频率高
* 将这些变量放在机器的寄存器中
* 但编译器可以忽略些选项
* 些声明只能用于 _*自动变量*_ 和 _*函数的形式参数*_

_*实际使用中:*_
* 只有少量变量存放在寄存器中,且只允许某些类型的变量
* _*过量的声明没有坏处*_ 编译器会忽略过量的和不支持的变量声明
* 使用些声明的变量,无论是否存放在寄存器,它的地址都是不能访问的.
 
==程序块结构==

{{{ class="brush:c"
	if (n > 0) {
		int i; /* declare a new i */
		for (i = 0; i < n; i++)
			...
	}
  }}}                                                                                     
  
* 除函数开始的地方
* 在程序块开始的地方,也就是一个左花括号,也可以创建声明的新的变量
* 变量一直到于之对应的右花括号的地方消失
* 程序块内的自动变量可以隐藏程序块外的同名变量
* 同理,函数的形式参数和自动变量也可以隐藏同名的外部变量

==初始化==

===不显示初始化===
* 外部变量与静态变量被初始化0
* 自动变量和寄存器变量的初值无意义
 
===变量定义时,可以后跟一个等号和一个表达式进行初始化===
* _*外部变量和静态变量的初始化表达式,必须是常量表达式, 且只能初始化一次,程序开始执行前初始化*_
* 自动变量和寄存器变量会在每次进入函数或程序块时进行初始化.　
 
===数组初始化===
{{{ class="brush:c"
  int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  }}}                                                                                     
* 省略数组的长度时,花括号中表达式的个数作为数组的长度.
* 初始化表达式的个数少于数组长度,外部变量,静态变量,自动变量来说,其他元素都会被初始化为０;
* 初始化表达式的个数大于数组长度,编译错误;
* 字符数组可以使用字符串,但计算数组长度时,不要忘记'\0'
{{{ class="brush:c"
   char p[]="ould";
   //等价于:
   char p[]={'o','u','l','d'};
   //但它们的长度都是5,还有一个'\0'
  }}}                                                                                     

==递归==

==C预处理器==

两个最常用的预处理指令:`#include` `#define`

===文件包含===
{{{ class="brush:c"
   #include "文件名"
   //或
   #include <文件名>
  }}}                                                                                     
* 上面的行被替换为由文件名指定的文件内容
* 如果文件名是由引号`"`指定的,将在源文件所在的位置查找该文件
* 如果没有找到文件,或文件名是由`<`和`>` 括起来的,则根据相应的规则查找该文件,规则同具体的实现有关.
* 被包含的文件本身也可包含`#include`

===宏替换===
{{{ class="brush:c"
  #define 名字　替换文本
  }}}                                                                                     
* 后面所有出现标记号的地方都会被替换为替换文本
* 宏定义的作用域从定义点开始到源文件末尾
* 替换文本是任意字符串
  {{{ class="brush:c"
    #define forever for(;;)
  }}}                                                                                     
* #define通常为单行
* 但也可以多行,必须在待续行上加上反斜杠`\`
* 宏定义中可以包含前面的宏定义
  {{{ class="brush:c"
    #define hello "hello world!"
    #define world hello "world"
    //宏world是:"hello world! world"
    //本应该是"hello world!" "world"
    //字符串好像自己连接了
  }}}                                                                                     
  
====带参数的宏====
  {{{ class="brush:c"
    #define max(A, B) ((A)>(B)?(A):(B))
    
    x=max(p+q,r+s);
    //将被替换为:
    x=((p+q)>(r+s)?(p+q):(r+s));
  }}}                                                                                     
  
* 缺点是参数表达式被计算多次
* 要善用括号,控制计算顺序
  {{{ class="brush:c"
    #define square(x) x*x
    
    x=square(z+1);
    //将被替换为:
    x=z+1*z+1;
    //是错误的
  }}}                                                                                     
* 使用`#`作为参数前缀,将会把实际参数扩展为带引号的字符串
  {{{ class="brush:c"
     #define dprint(expr) printf(#expr " = %g\n", expr)
     dprint(x/y)
     //调用该宏时,该宏将被扩展为:
     printf("x/y" " = &g\n", x/y);
     //其中的字符串被连接起来了,这样,该宏调用的效果等价于
     printf("x/y = &g\n", x/y);
  }}}                                                                                     
  * 如果实际参数包含`"`或`\`,将被扩展为`\"` `\\`
* 预处理运算符`##`, 如果替换文本中的参数与`##`相邻,则参数被实际参数替换,且`##`前后的空白符被删除.
  {{{ class="brush:c"
    #define paste(front, back) front ## back
    paste(name,1)
    //将被替换为:name1
    
  }}}                                                                                     
  
====取消宏定义====
  {{{ class="brush:c"
    #undef getchar
    int getchar(void) { ... }
    //后面的getchar就是函数名了
  }}}                                                                                     
  
===条件包含===

#if #endif #elif #else

* 条件为真,则包含相应的语句
* 条件为常量整型表达式
  * 不能包含sizeof enum常量　或类型转换运算符
  * 可以使用`defined(名字)`
* 可以使用系统变量
  {{{ class="brush:c"
    #if SYSTEM == SYSV
        #define HDR "sysv.h"
    #elif SYSTEM == BSD
        #define HDR "bsd.h"
    #elif SYSTEM == MSDOS
        #define HDR "msdos.h"
    #else
        #define HDR "default.h"
    #endif
    #include HDR
  }}}                                                                                     
* 预处理语句`#ifdef`和`ifndef`, 是`#if defined()`和`#if !defined()` 的缩写
  {{{ class="brush:c"
    #ifndef HDR
      #define EDR
      /* hdr.h 文件的内容放在这里 */
    #endif
  }}}                                                                                     
 

