%title Operating Systems Design and Implementation

%toc

=Operating Systems Design and Implementation =

* 软件分为系统软件和应用软件
  * 系统软件管理系统及应用程序
  * 应用软件执行用户最终所需要的功能
  * 最基本的系统软件就是操作系统
  * 它控制计算机的所有的资源并提供开发应用程序的基础
* virtual machine
  * 在裸机上加载一层软件来管理整个系统，为用户提供一套更容易理解与编程的接口
  * 这个接口叫virtual machine
  * 层软件号操作系统
* 微程序microprogram
  * 一层原始软件
  * 控制设备并向上一层提供一套更清晰的清晰的接口
  * 它实际上是一个解释器：也取得机器语言的指令，执行相应的指令
* 精简指令集计算机（Reduced Instruction Set Computer, RISC)
  * 没有微程序层
* 操作系统专指运行在内核态(kernel mode)或管态(supervisor mode)下的程序。
  * 它受硬件保护而免遭用户篡改
  * 命令解释器 编译器 编辑器运行在用户态(user mode), 它们是应用程序。
  
==什么是操作系统 ==
===操作系统作为虚拟机 ===
* 操作系统为用户提供一台等价的扩展计算机，或叫虚拟机，它比低层硬件更容易编程。

===操作系统作为资源管理器 ===
* 跟踪资源的使用状况、满足资源请求、提高资源利用率，及协调各程序和用户对资源的使用冲突。

==操作系统发展历史 ==
* 第一台数字计算机，英国数学家Charles Babbage设计，纯机械式，无操作系统
* 第一个程序员：Ada Lovelace,诗人拜伦的女儿。

===第一代计算机(1945 ~ 1955):真空管和插板  ===
* 每一台都专门设计，使用机器语言，没有编程语言，没有操作系统
 
===第二代计算机(1955 ~ 1965):晶体管和批处理系统  ===
* 卡片，磁带，批处理（读入一队作业，顺序执行），负责读入作业并输出结果的特殊程序就是操作系统的前身
 
===第三代计算机(1965 ~ 1980):集成电路芯片与多道程序  ===
* 当一个作业在等待io时，cpu就会空闲下来，很浪费
* *多道程序(multiprogramming):*
  # 将内存划分为几部分，每一部分存放一个作业
  # 当一个作业在等待io时，另一个作业可以使用cpu
* *spooling:*
  # Simultaneous Peripheral Operation On Line, 联机即时外设操作
  # 可以很快的将卡片上的作业读入磁盘。
* *分时系统(timesharing):*
  # 多道程序的变种
  # 每一个用户有一个终端
  # cpu轮流为它们服务
  # 可以为用户提供交互式服务
  # 每个用户感觉自己拥有一个完整的计算机
  # cpu空闲时可以执行后台大作业
* UNIX
* POSIX

===第四代计算机(1980 ~ NOW):个人计算机  ===
* 网络操作系统
* 分布式操作系统


==操作系统基本概念 ==

*系统调用*
* 由操作系统提供的操作系统与用户程序之间交互的 *扩展指令集*
* 两大类
* 与进程相关的 *系统调用*
* 与文件相关的 *系统调用*

===进程Process ===
*进程Process*
* 一个进程本质上是一个程序的 *执行*
*地址空间address space*
* 每个进程拥有自己的address space: 0 ~ 最大值
* address apce 中有： 可执行程序， 程序数据， 程序的堆栈
*进程还包括：一组寄存器register 程序计数器program counter 指针stack pointer  其他硬件寄存器hardware register*
*进程表 process tabel:*
* 除address space之外的进程所有的信息都保存在一张表中
* 每一进程对应表中的一项


