%title 超全的NFS文档For Linux (转)

=超全的NFS文档For Linux (转)=

日期: 2012-04-03 15:04

转自: http://bbs.chinaunix.net/thread-2267115-1-1.html

%toc

NFS server可以看作是一个FILE SERVER,它可以让你的PC通过网络将远端得NFS SERVER共享出来的档案MOUNT到自己的系统中，在CLIENT看来使用NFS的远端文件就象是在使用本地文件一样。 NFS协议从诞生到现在为止，已经有多个版本，如NFS V2（rfc1094）,NFS V3（rfc1813）（最新的版本是V4（rfc3010）。 

==一、各NFS协议版本的主要区别==

V3相对V2的主要区别： 

# 文件尺寸 <br/>
{{{
    2最大只支持32BIT的文件大小(4G),而NFS V3新增加了支持64BIT文件大小的技术。 
  }}}
# 文件传输尺寸 <br/>
{{{
    3没有限定传输尺寸，V2最多只能设定为8k，可以使用-rsize and -wsize 来进行设定。 
  }}}
# 完整的信息返回 <br/>
{{{
    3增加和完善了许多错误和成功信息的返回，对于服务器的设置和管理能带来很大好处。 
  }}}
# 增加了对TCP传输协议的支持 <br/>
{{{
    V2只提供了对UDP协议的支持，在一些高要求的网络环境中有很大限制，V3增加了对TCP协议的支持 
  }}}
# 异步写入特性 
# 改进了SERVER的mount性能 
# 有更好的I/O WRITES 性能。 
# 更强网络运行效能，使得网络运作更为有效。 
# 更强的灾难恢复功能。 

异步写入特性（v3新增加）介绍： 

NFS V3 能否使用异步写入，这是可选择的一种特性。NFS V3客户端发发送一个异步写入请求到服务器，在给客户端答复之前服务器并不是必须要将数据写入到存储器中（稳定的）。服务器能确定何时去写入数据或者将多个写入请求聚合到一起并加以处理，然后写入。客户端能保持一个数据的copy以防万一服务器不能完整的将数据写入。当客户端希望释放这个copy的时候，它会向服务器通过这个操作过程，以确保每个操作步骤的完整。异步写入能够使服务器去确定最好的同步数据的策略。使数据能尽可能的同步的提交何到达。与V2比较来看，这样的机制能更好的实现数据缓冲和更多的平行（平衡）。而NFS V2的SERVER在将数据写入存储器之前不能再相应任何的写入请求。 

V4相对V3的改进： 

# 改进了INTERNET上的存取和执行效能 
# 在协议中增强了安全方面的特性 
# 增强的跨平台特性 
 
==二、CLIENT和SERVER的具体操作和设置 ==

在讲NFS SERVER的运作之前先来看一些与NFS SERVER有关的东西： 
RPC（Remote Procedure Call） 

NFS本身是没有提供信息传输的协议和功能的，但NFS却能让我们通过网络进行资料的分享，这是因为NFS使用了一些其它的传输协议。而这些传输协议勇士用到这个RPC功能的。可以说NFS本身就是使用RPC的一个程序。或者说NFS也是一个RPC SERVER.所以只要用到NFS的地方都要启动RPC服务，不论是NFS SERVER或者NFS CLIENT。这样SERVER和CLIENT才能通过RPC来实现PROGRAM PORT的对应。可以这么理解RPC和NFS的关系：NFS是一个文件系统，而RPC是负责负责信息的传输。 

NFS需要启动的DAEMONS :

* <b>pc.nfsd:</b>主要复杂登陆权限检测等。 
* <b>rpc.mountd</b>：负责NFS的档案系统，当CLIENT端通过rpc.nfsd登陆SERVER后，对clinet存取server的文件进行一系列的管理 
* NFS SERVER在REDHAT LINUX平台下一共需要两个套件：nfs-utils和PORTMAP 
* <b>nfs-utils：</b>提供rpc.nfsd 及 rpc.mountd这两个NFS DAEMONS的套件 
* <b>portmap:</b>NFS其实可以被看作是一个RPC SERVER PROGRAM,而要启动一个RPC SERVER PROGRAM，都要做好PORT的对应工作，而且这样的任务就是由PORTMAP来完成的。通俗的说PortMap就是用来做PORT的mapping的。 

===一：服务器端的设定（以LINUX为例） ===

服务器端的设定都是在<b>/etc/exports</b>这个文件中进行设定的，设定格式如下： 

<b>欲分享出去的目录 主机名称1或者IP1(参数1，参数2） 主机名称2或者IP2（参数3，参数4） </b>

上面这个格式表示，同一个目录分享给两个不同的主机，但提供给这两台主机的权限和参数是不同的，所以分别设定两个主机得到的权限。 

可以设定的参数主要有以下这些： 

* <b>rw：</b>可读写的权限； 
* <b>ro：</b>只读的权限； 
* <b>no_root_squash：</b>登入到NFS主机的用户如果是ROOT用户，他就拥有ROOT的权限，此参数很不安全，建议不要使用。 
* <b>root_squash：</b> 登入到NFS主机的用户如果是ROOT用户，把他的权限压缩为匿名使用者，通常uid和gid都是nobody的那个用户。 
* <b>all_squash：</b>不管登陆NFS主机的用户是什么都会被重新设定为匿名用户，通常uid和gid都是nobody的那个用户。 默认值为no_all_squash
* <b>anonuid：</b>前面关于 *_squash 提到的匿名使用者的 UID 设定值，通常为 nobody，但是您可以自行设定这个 UID 的值，当然，这个 UID 必需要存在于您的 /etc/passwd 中；
* <b>anongid：</b>同 anonuid ，但是user ID成 group ID 就是了！ 
* <b>sync：</b>资料同步写入存储器中。 
* <b>async：</b>资料会先暂时存放在内存中，不会直接写入硬盘。 
* <b>insecure: </b>允许从这台机器过来的非授权访问。 
* <b>no_subtree_check: </b>: 这是减少共享访问检查
 
需要说明的是通过rw设置的读写权限还需要根据当前登录的用户来判断，例如使用参数(rw,root_squash)，假设服务器的上的目录owner是用户 test ，且目录权限是744，这样的话，客户端mount上的共享文件还是没有写的权限。 因为你使用的用户实际上是nobody或anonuid指定的用户。


例如可以编辑/etc/exports为： 

{{{
    /tmp　　　　　*(rw,no_root_squash) 
	/home/public　192.168.0.*(rw)　　 *(ro) 
	/home/test　　192.168.0.100(rw) 
	/home/linux　 *.the9.com(rw,all_squash,anonuid=40,anongid=40) 
  }}}
	
设定好后可以使用以下命令启动NFS: 
	
{{{   class="brush:bash"
	/etc/rc.d/init.d/portmap start (在REDHAT中PORTMAP是默认启动的） 
	/etc/rc.d/init.d/nfs start 
	}}}

<b>exportfs命令： </b>

如果我们在启动了NFS之后又修改了/etc/exports，是不是还要重新启动nfs呢？这个时候我们就可以用exportfs命令来使改动立刻生效，该命令格式如下： 

{{{
	exportfs [-aruv] 
	-a ：全部mount或者unmount /etc/exports中的内容 
	-r ：重新mount /etc/exports中分享出来的目录 
	-u ：umount 目录 
	-v ：在 export 的时候，将详细的信息输出到屏幕上。 
	}}}
			
具体例子： 

{{{ class="brush:bash"
	[root @test root]# exportfs -rv <==全部重新 export 一次！ 
	exporting 192.168.0.100:/home/test 
	exporting 192.168.0.*:/home/public 
	exporting *.the9.com:/home/linux 
	exporting *:/home/public 
	exporting *:/tmp 
	reexporting 192.168.0.100:/home/test to kernel 

	exportfs -au <==全部都卸载了。 
  }}}
  
===二、客户端的操作===

====showmount命令对于NFS的操作和查错有很大的帮助，所以我们先来看一下showmount的用法====
{{{
	showmount 
		-a ：这个参数是一般在NFS SERVER上使用，是用来显示已经mount上本机nfs目录的cline机器。 
		-e ：显示指定的NFS SERVER上export出来的目录。 
  }}}
  
例如： 
{{{ class="brush:bash"
	showmount -e 192.168.0.30 
	Export list for localhost: 
	/tmp * 
	/home/linux *.linux.org 
	/home/public (everyone) 
	/home/test 192.168.0.100 
  }}}
  
====mount nfs目录的方法 ====

{{{ class="brush:bash"
mount -t nfs hostname(orIP):/directory /mount/point 
  }}}
  
具体例子： 

{{{ class="brush:bash"
	Linux: mount -t nfs 192.168.0.1:/tmp /mnt/nfs 
	Solaris:mount -F nfs 192.168.0.1:/tmp /mnt/nfs 
	BSD: mount 192.168.0.1:/tmp /mnt/nfs 
  }}}

====mount nfs的其它可选参数====

<b>HARD mount和SOFT MOUNT： </b>

* HARD: NFS CLIENT会不断的尝试与SERVER的连接（在后台，不会给出任何提示信息,在LINUX下有的版本仍然会给出一些提示），直到MOUNT上。 
* SOFT:会在前台尝试与SERVER的连接，是默认的连接方式。当收到错误信息后终止mount尝试，并给出相关信息。 
 
例如：
{{{ class="brush:bash"
	mount -t nfs -o hard 192.168.0.10:/nfs /nfs 
  }}}
  
对于到底是使用hard还是soft的问题，这主要取决于你访问什么信息有关。例如你是想通过NFS来运行X PROGRAM的话，你绝对不会希望由于一些意外的情况（如网络速度一下子变的很慢，插拔了一下网卡插头等）而使系统输出大量的错误信息，如果此时你用的是HARD方式的话，系统就会等待，直到能够重新与NFS SERVER建立连接传输信息。另外如果是非关键数据的话也可以使用SOFT方式，如FTP数据等，这样在远程机器暂时连接不上或关闭时就不会挂起你的会话过程。 

<b>rsize和wsize： </b>

文件传输尺寸设定：V3没有限定传输尺寸，V2最多只能设定为8k，可以使用-rsize and -wsize 来进行设定。这两个参数的设定对于NFS的执行效能有较大的影响 

<b>bg：</b>在执行mount时如果无法顺利mount上时，系统会将mount的操作转移到后台并继续尝试mount，直到mount成功为止。（通常在设定/etc/fstab文件时都应该使用bg，以避免可能的mount不上而影响启动速度） 

<b>fg：</b>和bg正好相反，是默认的参数 

<b>nfsvers＝n:</b>设定要使用的NFS版本，默认是使用2，这个选项的设定还要取决于server端是否支持NFS VER 3 

<b>mountport：</b>设定mount的端口 

<b>port：</b>根据server端export出的端口设定，例如如果server使用5555端口输出NFS,那客户端就需要使用这个参数进行同样的设定 

<b>timeo=n:</b>设置超时时间，当数据传输遇到问题时，会根据这个参数尝试进行重新传输。默认值是7/10妙（0.7秒）。如果网络连接不是很稳定的话就要加大这个数值，并且推荐使用HARD MOUNT方式，同时最好也加上INTR参数，这样你就可以终止任何挂起的文件访问。 

<b>intr</b> 允许通知中断一个NFS调用。当服务器没有应答需要放弃的时候有用处。 

<b>udp：</b>使用udp作为nfs的传输协议（NFS V2只支持UDP) 
<b>tcp：</b>使用tcp作为nfs的传输协议 
<b>namlen=n：</b>设定远程服务器所允许的最长文件名。这个值的默认是255 
<b>acregmin=n：</b>设定最小的在文件更新之前cache时间，默认是3 
<b>acregmax=n：</b>设定最大的在文件更新之前cache时间，默认是60 
<b>acdirmin=n：</b>设定最小的在目录更新之前cache时间，默认是30 
<b>acdirmax=n：</b>设定最大的在目录更新之前cache时间，默认是60 
<b>actimeo=n：</b>将acregmin、acregmax、acdirmin、acdirmax设定为同一个数值，默认是没有启用。 
<b>retry=n：</b>设定当网络传输出现故障的时候，尝试重新连接多少时间后不再尝试。默认的数值是10000 minutes 
<b>noac:</b>关闭cache机制。 

同时使用多个参数的方法：`mount -t nfs -o timeo=3,udp,hard 192.168.0.30:/tmp /nfs `

请注意，NFS客户机和服务器的选项并不一定完全相同，而且有的时候会有冲突。比如说服务器以只读的方式导出，客户端却以可写的方式mount,虽然可以成功mount上，但尝试写入的时候就会发生错误。一般服务器和客户端配置冲突的时候，会以服务器的配置为准。 

==== /etc/fstab的设定方法 ====

{{{
	/etc/fstab的格式如下： 
	fs_spec　　　fs_file　　fs_type　　　fs_options　　fs_dump　fs_pass　 
	fs_spec:该字段定义希望加载的文件系统所在的设备或远程文件系统,对于nfs这个参数一般设置为这样：192.168.0.1:/NFS 
	fs_file:本地的挂载点 
	fs_type：对于NFS来说这个字段只要设置成nfs就可以了 
	fs_options:挂载的参数，可以使用的参数可以参考上面的mount参数。 
	fs_dump　-　该选项被"dump"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0 
	fs_pass　-　该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统"/"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0 。 
  }}}

====与NFS有关的一些命令介绍 ====

* nfsstat: 查看NFS的运行状态，对于调整NFS的运行有很大帮助 
* rpcinfo： 查看rpc执行信息，可以用于检测rpc运行情况的工具。 

==三、NFS调优 ==

<b>调优的步骤： </b>
# 测量当前网络、服务器和每个客户端的执行效率。 
# 分析收集来的数据并画出图表。查找出特殊情况，例如很高的磁盘和CPU占用、已经高的磁盘使用时间 
# 调整服务器 
# 重复第一到第三步直到达到你渴望的性能 

与NFS性能有关的问题有很多，通常可以要考虑的有以下这些选择： 

WSIZE,RSIZE参数来优化NFS的执行效能 

WSIZE、RSIZE对于NFS的效能有很大的影响。 
wsize和rsize设定了SERVER和CLIENT之间往来数据块的大小，这两个参数的合理设定与很多方面有关，不仅是软件方面也有硬件方面的因素会影响这两个参数的设定（例如LINUX KERNEL、网卡，交换机等等）。 

下面这个命令可以测试NFS的执行效能，读和写的效能可以分别测试，分别找到合适的参数。对于要测试分散的大量的数据的读写可以通过编写脚本来进行测试。在每次测试的时候最好能重复的执行一次MOUNT和unmount。 

time dd if=/dev/zero of=/mnt/home/testfile bs=16k count=16384 

用于测试的WSIZE,RSIZE最好是1024的倍数，对于NFS V2来说8192是RSIZE和WSIZE的最大数值，如果使用的是NFS V3则可以尝试的最大数值是32768。 
如果设置的值比较大的时候，应该最好在CLIENT上进入mount上的目录中，进行一些常规操作（LS,VI等等），看看有没有错误信息出现。有可能出现的典型问题有LS的时候文件不能完整的列出或者是出现错误信息，不同的操作系统有不同的最佳数值，所以对于不同的操作系统都要进行测试。 

设定最佳的NFSD的COPY数目。 

linux中的NFSD的COPY数目是在/etc/rc.d/init.d/nfs这个启动文件中设置的，默认是8个NFSD,对于这个参数的设置一般是要根据可能的CLIENT数目来进行设定的，和WSIZE、RSIZE一样也是要通过测试来找到最近的数值。 

UDP and TCP 

可以手动进行设置，也可以自动进行选择。 

mount -t nfs -o sync,tcp,noatime,rsize=1024,wsize=1024 EXPORT_MACHINE:/EXPORTED_DIR /DIR 

UDP有着传输速度快，非连接传输的便捷特性，但是UDP在传输上没有TCP来的稳定，当网络不稳定或者黑客入侵的时候很容易使NFS的 Performance 大幅降低甚至使网络瘫痪。所以对于不同情况的网络要有针对的选择传输协议。nfs over tcp比较稳定，nfs over udp速度较快。在机器较少网络状况较好的情况下使用UDP协议能带来较好的性能，当机器较多，网络情况复杂时推荐使用TCP协议（V2只支持UDP协议）。在局域网中使用UDP协议较好，因为局域网有比较稳定的网络保证，使用UDP可以带来更好的性能，在广域网中推荐使用TCP协议，TCP协议能让NFS在复杂的网络环境中保持最好的传输稳定性。可以参考这篇文章：http://www.hp.com.tw/ssn/unix/0212/unix021204.asp 

版本的选择 
V3作为默认的选择（RED HAT 8默认使用V2,SOLARIS 8以上默认使用V3），可以通过vers= mount option来进行选择。 
LINUX通过mount option的nfsvers=n进行选择。 

==四、NFS故障解决 ==

===NFSD没有启动起来 ===
首先要确认 NFS 输出列表存在，否则 nfsd 不会启动。可用 exportfs 命令来检查，如果 exportfs 命令没有结果返回或返回不正确，则需要检查 /etc/exports 文件。 

===mountd 进程没有启动 ===

mountd 进程是一个远程过程调用 (RPC) ，其作用是对客户端要求安装（mount）文件系统的申请作出响应。mountd进程通过查找 /etc/xtab文件来获知哪些文件系统可以被远程客户端使用。另外，通过mountd进程，用户可以知道目前有哪些文件系统已被远程文件系统装配，并得知远程客户端的列表。查看mountd是否正常启动起来可以使用命令rpcinfo进行查看，在正常情况下在输出的列表中应该象这样的行： 
{{{
	100005 1 udp 1039 mountd 
	100005 1 tcp 1113 mountd 
	100005 2 udp 1039 mountd 
	100005 2 tcp 1113 mountd 
	100005 3 udp 1039 mountd 
	100005 3 tcp 1113 mountd 
  }}}
  
如果没有起来的话可以检查是否安装了PORTMAP组件。 

    `rpm -qa|grep portmap `

===fs type nfs no supported by kernel ===

kernel不支持nfs文件系统，重新编译一下KERNEL就可以解决。 

===can't contact portmapper: RPC: Remote system error - Connection refused ===

出现这个错误信息是由于SEVER端的PORTMAP没有启动。 

===mount clntudp_create: RPC: Program not registered ===

NFS没有启动起来，可以用showmout -e host命令来检查NFS SERVER是否正常启动起来。 

===mount: localhost:/home/test failed, reason given by server: Permission denied ===

这个提示是当client要mount nfs server时可能出现的提示，意思是说本机没有权限去mount nfs server上的目录。解决方法当然是去修改NFS SERVER咯。 

===被防火墙阻挡 ===

这个原因很多人都忽视了，在有严格要求的网络环境中，我们一般会关闭linux上的所有端口，当需要使用哪个端口的时候才会去打开。而NFS默认是使用111端口，所以我们先要检测是否打开了这个端口，另外也要检查TCP_Wrappers的设定。 


==五、NFS安全 ==

NFS的不安全性主要体现于以下4个方面: 

# 新手对NFS的访问控制机制难于做到得心应手,控制目标的精确性难以实现 
# NFS没有真正的用户验证机制,而只有对RPC/Mount请求的过程验证机制 
# 较早的NFS可以使未授权用户获得有效的文件句柄 
# 在RPC远程调用中,一个SUID的程序就具有超级用户权限. 

加强NFS安全的方法： 

# 合理的设定/etc/exports中共享出去的目录，最好能使用anonuid，anongid以使MOUNT到NFS SERVER的CLIENT仅仅有最小的权限，最好不要使用no_root_squash。 
# 使用IPTABLE防火墙限制能够连接到NFS SERVER的机器范围 
{{{ class="brush:bash"
	iptables -A INPUT -i eth0 -p TCP -s 192.168.0.0/24 --dport 111 -j ACCEPT 
	iptables -A INPUT -i eth0 -p UDP -s 192.168.0.0/24 --dport 111 -j ACCEPT 
	iptables -A INPUT -i eth0 -p TCP -s 140.0.0.0/8 --dport 111 -j ACCEPT 
	iptables -A INPUT -i eth0 -p UDP -s 140.0.0.0/8 --dport 111 -j ACCEPT 
  }}}
# 为了防止可能的Dos攻击，需要合理设定NFSD 的COPY数目。 
# 修改/etc/hosts.allow和/etc/hosts.deny达到限制CLIENT的目的 
{{{ class="brush:bash"
	/etc/hosts.allow 
	portmap: 192.168.0.0/255.255.255.0 : allow 
	portmap: 140.116.44.125 : allow 

	/etc/hosts.deny 
	portmap: ALL : deny 
  }}}
# 改变默认的NFS 端口 <br/>
NFS默认使用的是111端口，但同时你也可以使用port参数来改变这个端口，这样就可以在一定程度上增强安全性。 
# 使用Kerberos V5作为登陆验证系统

