%title 表、栈和队列
%toc
=表、栈和队列 = 

==抽象数据类型 ==
* abstract data type, ADT
* 一些操作的集合
* 是数学的抽象
* 如表、集合、图和它们的操作一起被看作是一种抽象数据类型
* 就像整数实数布尔量等数据类型一样，它们有相关的操作。

==表(List ADT) ==
* A1,A2,A3 ... AN;表的大小为N
* 操作：PrintList MakeEmpty Insert Delete Find FindKth
* Ai+1 后继 Ai; Ai前驱Ai+1
* Ai+1是Ai的后继元(Successor)；Ai是Ai+1的前驱元(Predecessor)

===基于数组的实现 ===
* 需要对表的大小进行最大值预估
* PrintList Find 是线性时间
* FindKth是常数
* Insert Delete 需要移动元素，是O（N）

===链表(Linked List) ===
* 由一系列在内存中 *不必相连* 的结构组成。
* 每个结构中包含元素和指向后继元结构的指针`Next`, 最后一个单元`Next`指向`NULL`
  {{{ class="brush:c"
    struct Node{
      ElementType Element;
      struct Node *Next;
    }
    }}}
{{ADT_Linked-List.png}}
* 链表可以有一个Header指向第一个元素，有元Header都可以。
* 注意
  * 插入或删除是，需要知道那个位置的前驱元Predecessor
* 操作
  {{{ class="brush:c"
        #ifndef _List_H
        struct Node;
        typedef struct Node *PtrToNode;
        typedef PtrToNode List;
        typedef PtrToNode Position;

        List MakeEmpty( List L );
        int IsEmpty( List L );
        int IsLast( Position P, List L );
        Position Find( ElementType X, List L );
        void Delete( ElementType X, List L );
        Position FindPrevious( ElementType X, List L );
        void Insert( ElementType X, List L, Position P );
        void DeleteList( List L );
        Position Header( List L );
        Position First( List L );
        Position Advance( Position P );
        ElementType Retrieve( Position P );
        #endif    /* _List_H */
        
        /* Place in the interface file */
        struct Node
        {
            ElementType Element;
            Position    Next;
        };
    }}}
* 资源: [[list.h]], [[list.c]], [[testlist.c]]
    
===双链表(Doubly Linked List) ===
* 可以倒序扫描
* 增加了空间需求
* 插入删除操作加倍，有更多的指针需要定位
* 简化了操作，不再需要Predecessor
{{ADT_Doubly-Linked-List.png}}

===循环链表(Circularly Linked List) ===
{{ADT_Circularly-Linked-List.png}}

===例子：多项式(Polynomial) ===
* 结构体定义
  {{{ class="brush:c"
    typedef struct{
       int CoefArray[MaxDegree+1];
       int HighPower;
    } *Polynomial;
    }}}
* 操作：加乘
* 文件：[[poly.c|poly.c]]
* 基于单链表的实现：[[polynomail_list.c|poly_list.c]]
 
===例子：桶式排序(Bucket Sort) ===
* 有N个整数，范围：1 ～ M(或0 ～ M-1)， 排序
  # 建立一个大小为M的数组A, 元素初化为0
  # 读入N个整数，对于整数i, 令A[i]+=1
  # 扫描数组A，得到排好序的表
* Cost: O(M+N)
* 缺点：M过大,不再适用
* 算法：
  {{{ class="brush:c"
       #include<stdio.h>
       #define M 10000

        void BucketSort(int arr[], int length){
            int i, j, k,  count[M]={0};

            for(i = 0; i < length; i++){
                count[arr[i]] += 1;
            }

            j=0;
            for(i = 0; i < M; i++){
                for(k = 0; k < count[i]; k++){
                    arr[j]=i;
                    j++;
                }
            }
        }
    }}}
* 资源： [[bucket_sort.c]]

===例子：基数排序(Radix Sort Or Card Sort) ===
* 它是BucketSort的扩展
* 我们有N个数需要排序
  # 可以确定这些数在 0 ~ R^X之间
  # R是一种基数（比如二进制为2，十进制为10）
  # X就是其中最大的数在这种基数下的位数
* 可以这样做：
  # 准备0号 ～ R－1号， R个桶
  # 扫描这N个数的最低位（也就是第一位），把它们放到相应的桶中，每个桶中可能不仅有一个数
  # 顺序扫描这桶中的N个数的次低位（第二位），把它们放到相应的桶中，每个桶中可能不仅有一个数  
  # 迭代直到扫描完最高位。
  # *注意:*对于桶，要保证放入的顺序和取出的顺序一致；我们还需要存入中间数据的地方，可能是另外R个桶或是大小N的一个数组
* 资源：[[radix_sort.c]]

===基于游标实现的链表(Cursor) ===
* 有些语言并没有指针
* 如果没有指针如何实现链表呢？
* 在基于指针的链表中的两个重要特性：
  # 数据存储在一组结构体中，每个结构体包含数据和指向下一个结构体的指针
  # 可以申请得到一个新的结构体（malloc),也可以释放一个不再使用的结构体(free)
* 我们可以模仿上面两条特性来实现链表
  # 准备一个结构体数组CursorSpace，用 *下标* 表示一个结构体的地址。实现了特性1
    * 这个数组就相当于所有可用的内存
    * 所有的链表从此数组中分配空间
  # 针对特性2，需要模拟malloc和free
    * 有一个特殊的链表freelist，它的Header是CursorSpace[0]
    * 这个链表中保存了所有可用的空间
    * malloc就是从此链表中取出第一个可用的，也就是Header->Next, 如果存在的话
    * free就是再插入此链表的前端
    * CursorSpace[0]只是作为Header使用，并不参与空间分配，所以地址0可以作为NULL使用
    * 所以一个CursorSpace刚初始化完时，应该所有的空间都属于freelist
     
* 刚初始化好的CursorSpace
  * 所有空间都可用
| Slot                                                 | Element | Next                                                 |
|------------------------------------------------------|---------|------------------------------------------------------|
| 0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10 |         | 1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>0 |
    
* 代码
  {{{ class="brush:c"
     static Position
        CursorAlloc( void )
        {
            Position P;

            P = CursorSpace[ 0 ].Next;
            CursorSpace[ 0 ].Next = CursorSpace[ P ].Next;

            return P;
        }

        static void
        CursorFree( Position P )
        {
            CursorSpace[ P ].Next = CursorSpace[ 0 ].Next;
            CursorSpace[ 0 ].Next = P;
        }
    }}}
* 一个CursorSpace实例：
  * 包含两个链表
    # 第一个对应 3 7 8 2， 3是header, 值为：c d f 
    # 第一个对应 5 10 1 9， 5是header, 值为：a b e 
  * 可用空间freelist是0 6 4， 0是header, 可用冤空间还有两个:6 4
| Slot                                                 | Element                                                       | Next                                                 |
|------------------------------------------------------|---------------------------------------------------------------|------------------------------------------------------|
| 0<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10 | -<br>b<br>f<br>header<br>-<br>header<br>-<br>c<br>d<br>e<br>a | 6<br>9<br>0<br>7<br>0<br>10<br>4<br>8<br>2<br>0<br>1 |

* 资源：[[cursor.h]] [[cursor.c]]  [[testcurs.c]] 
    

==栈(Stack ADT) ==

===栈模型(Stack Model)===
*Stack:*
* Stack是只能在 一个位置 上进行插入和删除的List
* 该位置在表的末端，被称之为 *栈顶(top)*
* 又称之为LILO表（后进先出)
 
*Operation:*
* *Push:* 在top上插入一个元素
* *Pop:* 删除并返回在top上的元素
* *Top:* 返回top上的元素并不删除，可以在Pop之前来进行验证操作
 
*错误：*
* 对empty statck进行Pop Top操作被认为是ADT错误
* Push时空间不足认为是实现错误

===Stack的实现 ===
Stack是一个List，所以任何实现List的方式都可以实现Stack,最常用的有两种：
* 基于指针
* 基于数组
 
====基于单链表的Stack ====
* 实现
* 花费：除了置空栈之外，所有的操作都花费常数时间
* 缺点:malloc与free是昂贵的
* 解决：
  # 使用双链表
  # Pop时并不free,只是把它移到第二个链表中
  # Push并不总是malloc,先查看第二个链表有没有空间，若有直接拿来用。
====基于数组的Stack ====
*概要:*
* 这是一种更流行的做法
* 唯一的潜在危害就是预先声明一个数组的大小
* 一般来说这不是问题
* 因为大多数典型的应用在任五时刻，Statck的元素个数并不会太多
* 声明一个足够用又不是太浪费的数组，具体到应用的话，并不是太难
*实现:*
# Stack对应一个数组
# TopOfStack是一个表示Stack Top的下标
# Empty Stack时，TopOfStack等于 -1
# Push(X): TopOfStack加1 ，Stack[TopOfStack]=x
# Pop(Stack):返回Stack[TopOfStack],  TopOfStack减1
*花费:*
* 所有的操作以非常快的常数时间运行
