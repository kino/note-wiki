%title 算法分析
%toc
=算法分析 =

==数学基础 ==

===定义 ===
* *大O定义:* 
  {{{ class="brush:math"
    如果存在正常数 `c` 和 `n_0`, 使得当`N>n_0`时, `T(N)<=cf(N)`, 记作 ` T(N) = O(f(N)) `
    <br>
    <br>
    <strong>    *注：</strong>`T(N)`在以不快于`f(N)`的速度增长，所以`f(N)`是`T(N)`的一个上界，`upper bound`.
    }}}
    
* *Omega定义:* 
  {{{ class="brush:math"
    如果存在正常数 `c` 和 `n_0`, 使得当`N>n_0`时, `T(N)>=cg(N)`, 记作 ` T(N) = Omega(g(N)) `
    <br>
    <br>
    <strong>    *注：</strong>`T(N)`在以不慢于`g(N)`的速度增长，所以`g(N)`是`T(N)`的一个下界，`lower bound`.
    }}}
* *Theta定义:* 
  {{{ class="brush:math"
    ` T(N) = Theta(h(N)) `, 当且仅当 ` T(N) = O(h(N)) ` 且` T(N) = Omega(h(N)) `
    }}}
* *小o定义:* 
  {{{ class="brush:math"
     如果` T(N) = O(h(N)) ` 且` T(N) != Theta(h(N)) `, 则` T(N) = o(h(N)) `
    }}}
* 通常为了证明 ` T(N) = O(h(N)) ` , 通常会使用一些已知的结果，所以计算通常会很简单。
 
===法则 ===
* *法则一:* 
  {{{ class="brush:math"
    如果`T_1(N)=O(f(N)`且`T_2(N)=O(g(N)`, 那么：<br>
    (a)  `T_1(N) + T_2(N) = max(O(f(N)), O(g(N)))`;<br>
    (b)  `T_1(N)*T_2(N) = max(f(N)*g(N))`;<br>
    }}}
* *法则二:* 
  {{{ class="brush:math"
    如果`T(N)`是一个`k`次多项式, 那么 `T(N)=Theta(N^k)`
    }}}
* *法则三:* 
  {{{ class="brush:math"
    对任意常数`k`， `log^kN=O(N)`, 说明对数增长的很缓慢
    }}}
* *常见函数的增长率，按大小:* 
  {{{ class="brush:math"
    <table> 
    <tr><th>函数       </th><th>名称     </th></tr>
    <tr><td>`c`        </td><td>常数      </td></tr>
    <tr><td>`logN`     </td><td>对数级    </td></tr>
    <tr><td>`log^2N`   </td><td>对数平方根</td></tr>     
    <tr><td>`N`        </td><td>线性级    </td></tr>
    <tr><td>`NlogN`    </td><td>          </td></tr>
    <tr><td>`N^2`      </td><td>平方根    </td></tr>
    <tr><td>`N^3`      </td><td>立方根    </td></tr>
    <tr><td>`2^N`      </td><td>指数级    </td></tr>
    </table>
    }}}
* *分析大O,可以进行各种简化，数度要求很低 :* 
  * 低价项可以被忽略
  * 常数被放弃
  {{{ class="brush:math"
    `T(N)=O(2N^2)` 与 `T(N)=O(N^2+N)` 都应该简化为：<br>
    `T(N)=O(2N^2)`
    }}}
* *通过极限计算相对增长率:* 
  {{{ class="brush:math"
    计算极限`lim_(n->\infty)f(N)/g(N)`, 来确定`f(N)`和`g(N)`的相对增长率：<br>
    * 极限是`0`:意味着`f(N)=o(g(N))` <br>
    * 极限是`c!=0`:意味着`f(N)=Theta(g(N))` <br>
    * 极限是`\infty`:意味着`g(N)=o(f(N))` <br>
    * 极限`摆动`:意味着`二者无关` <br>
    }}}
* *简单代数方法:* 
  {{{ class="brush:math"
    `f(N)=NlogN`, `g(N)=N^1.5`则：<br>
    1) 比较`f(N)`与`g(N)`哪个增长的快 <br>
    2) 就是比较`logN`与`N^0.5` <br>
    3) 就是比较`log^2N`与`N` <br>
    4) 则`g(N)`快于`f(N)` <br>
    }}}
    
==计算运行时间 ==
===一般法则 ===
* *法则 1 -- For 循环:*
  * 一次for循环的时间至多是循环内语句（包括测试）的运行时间乘以迭代次数。
* *法则 2 -- 嵌套的For 循环:*
  * 由里向外分析。在一组嵌套循环内的一条语句的总运行时间是该该语句的运行时间乘以所有for循环大小的乘积。
* *法则 3 -- 顺序语句:*
  * 将各语句的运行时间求和就可。
* *法则 4 -- IF/ELSE:*
  * 判断加上运行时间较长的分支

===最大子序列 ===
* 分治算法:O(NlogN)
* O(N)算法
{{{ class="brush:c"
  int 
  MaxSubsequenceSum(const int A[ ], int N)
  {
    int ThisSum, MaxSum, j;

    ThisSum=MaxSum=0;
    for(j=0; j<N; j++)
    {
        ThisSum += A[j];
        if(ThisSum > MaxSum)
        {
            MaxSum=ThisSum;
        }else if(ThisSum<0)
        {
            ThisSum=0;
        }
    }
    
    return MaxSum;
  }
  }}}
  

===运行时间中的对数 ===
* 分析算法最混乱的地方大概集中在对数上。
* 对数最常出现的地方
  * 分治算法
  * 如果一个算法用常数时间（O(1))将问题的大小消减为某一部分（通常为1/2)，那第该算法就是O(logN).
    如果使用常数时间只是把问题减少了一个常数（如将问题减少1）,那这样的算法就是O(N)
    
===二分查找 ===
* log(N)
{{{ class="brush:c"
    int
    BinarySearch(const int arr[], int x, int N)
    {
        int Low,High,Mid, NotFound;

        Low = 0;
        High = N;
        NotFound = -1;

        while(Low <= High){
            Mid=(Low+High)/2;

            if(arr[Mid]>x){
                High=Mid-1;
            }else if(arr[Mid]<x){
                Low = Mid+1;
            }else{
                return Mid;
            }

        }

        return NotFound;
    }
  }}}
===最大公因数（欧机里德算法） ===
* log(N)
{{{class="brush:c"
    int gcd(int M, int N){
        int temp;
        if(M<N){
            temp = M;
            M = N;
            N = temp;
        }

        while(N>0){
            temp = N;
            N = M%N;
            M = temp;
        }

        return M;
    }
  }}}
===定理 ===
{{{ class="brush:math"
  如果 `M > N`, 则 `M mod N < M/2`
  }}}
===幂运算 ===
* log(N)
{{{ class="brush:c"
    unsigned long power(int m, int x){

        if(x<=1){
            return x==0?1:m;
        }else if(x%2==0){
            return (unsigned long)power(m*m, x/2);
        }else{
            return (unsigned long)power(m*m, x/2)*m;
        }

    }
  }}}

==校验分析 ==
===校验实际运算时间 ===
# 记录N时的运行时间
# 看2N时的运算时间
  * O(N)算法，时间应该乘以2
  * O(N^2)算法，时间应该乘以4
  * O(N^3)算法，时间应该乘以8
  * O(logN)算法，时间多加一个常数
  * O(NlogN)算法，两倍多一点
===验证T(N)=O(f(N)),计算T(N)/f(N) ===
# 间隔记录N(通常为2的倍数隔开）在某个范围内的实际运行时间T(N)
# 统计T(N)/f(N)
  * 收敛于正常数， 和理想接近
  * 收敛于0， f(N)估计过大
  * 发散，说明程序不是O(f(N))
  
